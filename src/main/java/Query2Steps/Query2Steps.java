package Query2Steps;/* Query2Steps.java */
/* Generated By:JavaCC: Do not edit this line. Query2Steps.java */
import java.lang.StringBuffer;
import java.text.ParseException;
import java.io.StringReader;
import java.io.BufferedReader;
import java.io.Reader;
import java.io.InputStream;
import java.util.*;
import java.lang.Math;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

/**
 * New line translator.
 */
public class Query2Steps implements Query2StepsConstants {

  private static StringBuffer sqlSB;   // internal SQL representation.

  public Query2Steps() {}

  public String getSQL()
      {
          return sqlSB.toString();
      }

  /** Main entry point. */
  public static String parser(String str) throws ParseException, IOException{
//    InputStream targetStream = new FileInputStream(new File(path));
    Query2Steps parser = new Query2Steps(new BufferedReader(new StringReader(str)));
//    Query2Steps parser = new Query2Steps(System.in);
    sqlSB = new StringBuffer();
    parser.parse();
    String output = parser.getSQL();
    System.out.println();
    return output;
  }

  static final public void parse() throws ParseException {List<Object> s;
  int idx=0;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      s = Expression(idx);
      jj_consume_token(19);

    }
    jj_consume_token(0);
}

  static final public List<Object> Expression(int idx) throws ParseException {List<Object> pre, post;
    String expression, components, operand = "";
    Token tSearchName, tOperator, tComparand;
    pre = queryTerm(idx);
expression = (String) pre.get(1);
              idx = (int) pre.get(0);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        tOperator = jj_consume_token(AND);
operand = tOperator.image;
        break;
        }
      case OR:{
        tOperator = jj_consume_token(OR);
operand = tOperator.image;;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException("error",0);
      }
      post = queryTerm(idx);
idx = (int) post.get(0) + 1;
                 if (operand.equals("and")){
                  expression += "&" + (String)post.get(1);
                 }
                 else
                 { expression += "||" + (String)post.get(1); }
//                 expression = "("+ expression + "+" + post + "-" + expression + "*" + post + ")";
                 components = "S" + String.valueOf(idx);
                 sqlSB.append(expression + "," + components + "\n");
                 expression = components;
    }
if (operand.isEmpty()){
                expression = (String)pre.get(1);
                sqlSB.append(expression + "," + "S" + String.valueOf(idx));
              }
              {if ("" != null) return Arrays.asList(idx,expression);}
    throw new Error("Missing return statement in function");
}

/**
 * Query terms may consist of a parenthetically separated expression or
 * may be a query criteria of the form queryName = something or queryName <> something.
 *
 */
  static final public List<Object> queryTerm(int idx) throws ParseException {Token tSearchName, tComparator, tComparand;
        String name, sComparand, table, columnName;
        List<Object> subexpression;
        String expression = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      tSearchName = jj_consume_token(ID);
name = tSearchName.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        tComparator = jj_consume_token(EQUALS);
        break;
        }
      case NOTEQUAL:{
        tComparator = jj_consume_token(NOTEQUAL);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException("error",0);
      }
      tComparand = jj_consume_token(ID);
sComparand = tComparand.image;
//                System.out.println(sComparand);
//                return sComparand;
                  {if ("" != null) return Arrays.asList(idx, sComparand);}
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      subexpression = Expression(idx);
      jj_consume_token(RPAREN);
//          expression = "(" + subexpression + ")";
//          System.out.println(expression);
//          return Arrays.asList(1,subexpression);
          {if ("" != null) return subexpression;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException("error",0);
    }
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Query2StepsTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x22000,0x1800,0x1800,0x18000,0x22000,};
	}

  /** Constructor with InputStream. */
  public Query2Steps(InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Query2Steps(InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new Query2StepsTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Query2Steps(Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new Query2StepsTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new Query2StepsTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Query2Steps(Query2StepsTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Query2StepsTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private List<int[]> jj_expentries = new ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[20];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 5; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 20; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
//	 return new ParseException(token, exptokseq, tokenImage);
    return new ParseException("error",0);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
